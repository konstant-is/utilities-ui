{"version":3,"sources":["../src/logError.ts"],"sourcesContent":["// import type pino from 'pino'\n\n// interface LoggerConfig {\n//   loggingLevels: Record<string, pino.Level | false>\n//   logger: pino.Logger\n// }\n\n// export const logError = ({ err, config }: { err: unknown; config: LoggerConfig }): void => {\n//   let level: false | pino.Level = 'error'\n\n//   if (\n//     err &&\n//     typeof err === 'object' &&\n//     'name' in err &&\n//     typeof err.name === 'string' &&\n//     typeof config.loggingLevels[err.name] !== 'undefined'\n//   ) {\n//     level = config.loggingLevels[err.name]\n//   }\n\n//   if (level) {\n//     const logObject: { err?: unknown; msg?: unknown } = {}\n\n//     if (level === 'info') {\n//       logObject.msg = err && typeof err === 'object' && 'message' in err ? err.message : 'Error'\n//     } else {\n//       logObject.err = err ?? 'Unknown error' // Handle undefined or null error\n//     }\n\n//     config.logger[level](logObject)\n//   }\n// }\n"],"names":[],"mappings":"AAAA,+BAA+B;AAE/B,2BAA2B;AAC3B,sDAAsD;AACtD,wBAAwB;AACxB,IAAI;AAEJ,+FAA+F;AAC/F,4CAA4C;AAE5C,SAAS;AACT,aAAa;AACb,iCAAiC;AACjC,uBAAuB;AACvB,sCAAsC;AACtC,4DAA4D;AAC5D,QAAQ;AACR,6CAA6C;AAC7C,MAAM;AAEN,iBAAiB;AACjB,6DAA6D;AAE7D,8BAA8B;AAC9B,mGAAmG;AACnG,eAAe;AACf,iFAAiF;AACjF,QAAQ;AAER,sCAAsC;AACtC,MAAM;AACN,IAAI"}