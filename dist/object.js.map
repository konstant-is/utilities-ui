{"version":3,"sources":["../src/object.ts"],"sourcesContent":["// @ts-nocheck\n\n// Utility type to extract keys that are strings from a union type\ntype ExtractKeys<T> = Extract<T, string>\n\n/**\n * Get a deeply nested property of an object based on a dot-separated path.\n * @param obj - The object to traverse.\n * @param path - Dot-separated string representing the path to the property.\n * @returns The value at the specified path or undefined if the path does not exist.\n */\nexport const getNestedProperty = (obj: Record<string, unknown>, path: string): any => {\n  return path\n    .split('.') // Split the path into individual keys\n    .reduce(\n      (acc, key) => (acc && typeof acc === 'object' && key in acc ? acc[key] : undefined),\n      obj,\n    ) // Traverse the object based on the keys\n}\n\n/**\n * Checks if the given item is a plain object (not an array, null, or primitive).\n * @param item - The item to check.\n * @returns True if the item is an object, otherwise false.\n */\nexport function isObject(item: unknown): boolean {\n  return item !== null && typeof item === 'object' && !Array.isArray(item)\n}\n\n/**\n * Performs a deep merge of two objects.\n * If both properties are objects, they are recursively merged.\n * Primitive values in the source object overwrite those in the target object.\n * @param target - The object to be updated.\n * @param source - The object to merge into the target.\n * @returns The merged object.\n */\nexport function deepMerge<T, R>(target: T, source: R): T & R {\n  const output = { ...target } as T & R // Create a shallow copy of the target\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      const sourceValue = (source as Record<string, unknown>)[key]\n      if (isObject(sourceValue)) {\n        // If the source value is an object, recursively merge\n        if (!(key in target)) {\n          Object.assign(output, { [key]: sourceValue }) // Copy source value if not in target\n        } else {\n          output[key] = deepMerge((target as Record<string, unknown>)[key], sourceValue)\n        }\n      } else {\n        // Overwrite with primitive values from source\n        Object.assign(output, { [key]: sourceValue })\n      }\n    })\n  }\n  return output\n}\n\n/**\n * Creates an object where each key maps to its own name as a string.\n * @param keys - Array of keys to create the object from.\n * @returns An object where each key is assigned its own name as the value.\n */\nexport const createObjectKeys = <T extends string>(keys: ExtractKeys<T>[]): Record<T, string> => {\n  return keys.reduce(\n    (acc, key) => {\n      acc[key] = key // Assign the key to itself as the value\n      return acc\n    },\n    {} as Record<T, string>,\n  )\n}\n"],"names":["getNestedProperty","obj","path","split","reduce","acc","key","undefined","isObject","item","Array","isArray","deepMerge","target","source","output","Object","keys","forEach","sourceValue","assign","createObjectKeys"],"mappings":"AAAA,cAAc;AAEd,kEAAkE;AAGlE;;;;;CAKC,GACD,OAAO,MAAMA,oBAAoB,CAACC,KAA8BC;IAC9D,OAAOA,KACJC,KAAK,CAAC,KAAK,sCAAsC;KACjDC,MAAM,CACL,CAACC,KAAKC,MAASD,OAAO,OAAOA,QAAQ,YAAYC,OAAOD,MAAMA,GAAG,CAACC,IAAI,GAAGC,WACzEN,KACA,wCAAwC;;AAC9C,EAAC;AAED;;;;CAIC,GACD,OAAO,SAASO,SAASC,IAAa;IACpC,OAAOA,SAAS,QAAQ,OAAOA,SAAS,YAAY,CAACC,MAAMC,OAAO,CAACF;AACrE;AAEA;;;;;;;CAOC,GACD,OAAO,SAASG,UAAgBC,MAAS,EAAEC,MAAS;IAClD,MAAMC,SAAS;QAAE,GAAGF,MAAM;IAAC,CAAW,sCAAsC;;IAC5E,IAAIL,SAASK,WAAWL,SAASM,SAAS;QACxCE,OAAOC,IAAI,CAACH,QAAQI,OAAO,CAAC,CAACZ;YAC3B,MAAMa,cAAc,AAACL,MAAkC,CAACR,IAAI;YAC5D,IAAIE,SAASW,cAAc;gBACzB,sDAAsD;gBACtD,IAAI,CAAEb,CAAAA,OAAOO,MAAK,GAAI;oBACpBG,OAAOI,MAAM,CAACL,QAAQ;wBAAE,CAACT,IAAI,EAAEa;oBAAY,GAAG,qCAAqC;;gBACrF,OAAO;oBACLJ,MAAM,CAACT,IAAI,GAAGM,UAAU,AAACC,MAAkC,CAACP,IAAI,EAAEa;gBACpE;YACF,OAAO;gBACL,8CAA8C;gBAC9CH,OAAOI,MAAM,CAACL,QAAQ;oBAAE,CAACT,IAAI,EAAEa;gBAAY;YAC7C;QACF;IACF;IACA,OAAOJ;AACT;AAEA;;;;CAIC,GACD,OAAO,MAAMM,mBAAmB,CAAmBJ;IACjD,OAAOA,KAAKb,MAAM,CAChB,CAACC,KAAKC;QACJD,GAAG,CAACC,IAAI,GAAGA,IAAI,wCAAwC;;QACvD,OAAOD;IACT,GACA,CAAC;AAEL,EAAC"}