{"version":3,"sources":["../src/createFieldOptions.ts"],"sourcesContent":["import { capitalize } from './formatString.js'\n\n// Define a utility type to extract the keys from a union type\ntype ExtractKeys<T> = T extends string ? T : never\n\n// Create a generic function to create the record and options based on the type\nexport const createFieldOptions = <T extends string>(keys: ExtractKeys<T>[]) => {\n  const values = keys.reduce(\n    (acc, key) => {\n      acc[key] = key\n      return acc\n    },\n    {} as Record<ExtractKeys<T>, string>,\n  )\n\n  const options = keys.map((key) => ({\n    label: capitalize(key),\n    value: key,\n  }))\n\n  return { values, options }\n}\n"],"names":["capitalize","createFieldOptions","keys","values","reduce","acc","key","options","map","label","value"],"mappings":"AAAA,SAASA,UAAU,QAAQ,oBAAmB;AAK9C,+EAA+E;AAC/E,OAAO,MAAMC,qBAAqB,CAAmBC;IACnD,MAAMC,SAASD,KAAKE,MAAM,CACxB,CAACC,KAAKC;QACJD,GAAG,CAACC,IAAI,GAAGA;QACX,OAAOD;IACT,GACA,CAAC;IAGH,MAAME,UAAUL,KAAKM,GAAG,CAAC,CAACF,MAAS,CAAA;YACjCG,OAAOT,WAAWM;YAClBI,OAAOJ;QACT,CAAA;IAEA,OAAO;QAAEH;QAAQI;IAAQ;AAC3B,EAAC"}