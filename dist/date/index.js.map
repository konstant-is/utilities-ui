{"version":3,"sources":["../../src/date/dateFormat.ts","../../src/date/dateUtils.ts"],"sourcesContent":["import { format, formatISO, FormatOptions } from 'date-fns'\n\n/**\n * Utility function to format a date with the specified format string.\n *\n * @param date - The date to format (can be Date, number, or string).\n * @param formatStr - The format string (default is 'PPP').\n * @param options - Additional format options.\n * @returns The formatted date string.\n */\nexport const formatDate = (\n  date: Date | number | string,\n  formatStr: string = 'PPP',\n  options?: FormatOptions,\n): string => {\n  const dt = new Date(date)\n  return format(dt, formatStr, { ...options })\n}\n\n/**\n * Utility function to format a date in ISO format.\n *\n * @param date - The date to format (can be Date, number, or string).\n * @returns The ISO formatted date string.\n */\nexport const formatISODate = (date: Date | number | string): string => {\n  return formatISO(new Date(date))\n}\n\n/**\n * Utility function to format a time with the specified format string.\n *\n * @param date - The date to format (can be Date, number, or string).\n * @param formatStr - The time format string (default is 'kk:mm').\n * @param options - Additional format options.\n * @returns The formatted time string.\n */\nexport const formatTime = (\n  date: Date | number | string,\n  formatStr: string = 'kk:mm',\n  options?: FormatOptions,\n): string => {\n  return formatDate(date, formatStr, options)\n}\n","import { isDate, isAfter, isBefore } from 'date-fns'\n\n/**\n * Checks if a given date is between a start date and an end date (exclusive).\n *\n * @param date - The date to check (can be Date, number, or string).\n * @param start - The start date (can be Date, number, or string).\n * @param end - The end date (can be Date, number, or string).\n * @returns `true` if the date is between the start and end dates, otherwise `false`.\n */\nexport const isBetween = (\n  date: Date | number | string,\n  start: Date | number | string,\n  end: Date | number | string,\n): boolean => {\n  const dt = new Date(date)\n  const startDt = new Date(start)\n  const endDt = new Date(end)\n\n  if (!isDate(dt) || !isDate(startDt) || !isDate(endDt)) {\n    throw new Error('Invalid date provided')\n  }\n\n  return isAfter(dt, startDt) && isBefore(dt, endDt)\n}\n\nexport { isDate }\n"],"mappings":";AAAA,SAAS,QAAQ,iBAAgC;AAU1C,IAAM,aAAa,CACxB,MACA,YAAoB,OACpB,YACW;AACX,QAAM,KAAK,IAAI,KAAK,IAAI;AACxB,SAAO,OAAO,IAAI,WAAW,EAAE,GAAG,QAAQ,CAAC;AAC7C;AAQO,IAAM,gBAAgB,CAAC,SAAyC;AACrE,SAAO,UAAU,IAAI,KAAK,IAAI,CAAC;AACjC;AAUO,IAAM,aAAa,CACxB,MACA,YAAoB,SACpB,YACW;AACX,SAAO,WAAW,MAAM,WAAW,OAAO;AAC5C;;;AC3CA,SAAS,QAAQ,SAAS,gBAAgB;AAUnC,IAAM,YAAY,CACvB,MACA,OACA,QACY;AACZ,QAAM,KAAK,IAAI,KAAK,IAAI;AACxB,QAAM,UAAU,IAAI,KAAK,KAAK;AAC9B,QAAM,QAAQ,IAAI,KAAK,GAAG;AAE1B,MAAI,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,OAAO,KAAK,CAAC,OAAO,KAAK,GAAG;AACrD,UAAM,IAAI,MAAM,uBAAuB;AAAA,EACzC;AAEA,SAAO,QAAQ,IAAI,OAAO,KAAK,SAAS,IAAI,KAAK;AACnD;","names":[]}